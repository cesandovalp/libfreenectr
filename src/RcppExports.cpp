// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// CreateSimpleDevice
void CreateSimpleDevice();
RcppExport SEXP _libfreenectr_CreateSimpleDevice() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    CreateSimpleDevice();
    return R_NilValue;
END_RCPP
}
// SetTiltDegrees
void SetTiltDegrees(int angle);
RcppExport SEXP _libfreenectr_SetTiltDegrees(SEXP angleSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type angle(angleSEXP);
    SetTiltDegrees(angle);
    return R_NilValue;
END_RCPP
}
// GetAccelerometers
NumericVector GetAccelerometers();
RcppExport SEXP _libfreenectr_GetAccelerometers() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(GetAccelerometers());
    return rcpp_result_gen;
END_RCPP
}
// GetTiltDegrees
double GetTiltDegrees();
RcppExport SEXP _libfreenectr_GetTiltDegrees() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(GetTiltDegrees());
    return rcpp_result_gen;
END_RCPP
}
// SetLed
void SetLed(std::string status);
RcppExport SEXP _libfreenectr_SetLed(SEXP statusSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type status(statusSEXP);
    SetLed(status);
    return R_NilValue;
END_RCPP
}
// DeviceCount
int DeviceCount();
RcppExport SEXP _libfreenectr_DeviceCount() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(DeviceCount());
    return rcpp_result_gen;
END_RCPP
}
// StartVideo
void StartVideo();
RcppExport SEXP _libfreenectr_StartVideo() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    StartVideo();
    return R_NilValue;
END_RCPP
}
// StartDepth
void StartDepth();
RcppExport SEXP _libfreenectr_StartDepth() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    StartDepth();
    return R_NilValue;
END_RCPP
}
// GetFrameRGB
NumericVector GetFrameRGB();
RcppExport SEXP _libfreenectr_GetFrameRGB() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(GetFrameRGB());
    return rcpp_result_gen;
END_RCPP
}
// StartGLUTVideo
int StartGLUTVideo();
RcppExport SEXP _libfreenectr_StartGLUTVideo() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(StartGLUTVideo());
    return rcpp_result_gen;
END_RCPP
}
// GetResolution
NumericVector GetResolution();
RcppExport SEXP _libfreenectr_GetResolution() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(GetResolution());
    return rcpp_result_gen;
END_RCPP
}
// SetHighResolution
void SetHighResolution();
RcppExport SEXP _libfreenectr_SetHighResolution() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    SetHighResolution();
    return R_NilValue;
END_RCPP
}
// SetMediumResolution
void SetMediumResolution();
RcppExport SEXP _libfreenectr_SetMediumResolution() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    SetMediumResolution();
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_libfreenectr_CreateSimpleDevice", (DL_FUNC) &_libfreenectr_CreateSimpleDevice, 0},
    {"_libfreenectr_SetTiltDegrees", (DL_FUNC) &_libfreenectr_SetTiltDegrees, 1},
    {"_libfreenectr_GetAccelerometers", (DL_FUNC) &_libfreenectr_GetAccelerometers, 0},
    {"_libfreenectr_GetTiltDegrees", (DL_FUNC) &_libfreenectr_GetTiltDegrees, 0},
    {"_libfreenectr_SetLed", (DL_FUNC) &_libfreenectr_SetLed, 1},
    {"_libfreenectr_DeviceCount", (DL_FUNC) &_libfreenectr_DeviceCount, 0},
    {"_libfreenectr_StartVideo", (DL_FUNC) &_libfreenectr_StartVideo, 0},
    {"_libfreenectr_StartDepth", (DL_FUNC) &_libfreenectr_StartDepth, 0},
    {"_libfreenectr_GetFrameRGB", (DL_FUNC) &_libfreenectr_GetFrameRGB, 0},
    {"_libfreenectr_StartGLUTVideo", (DL_FUNC) &_libfreenectr_StartGLUTVideo, 0},
    {"_libfreenectr_GetResolution", (DL_FUNC) &_libfreenectr_GetResolution, 0},
    {"_libfreenectr_SetHighResolution", (DL_FUNC) &_libfreenectr_SetHighResolution, 0},
    {"_libfreenectr_SetMediumResolution", (DL_FUNC) &_libfreenectr_SetMediumResolution, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_libfreenectr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
